package javacore.Concorrencia.test;

import javacore.Concorrencia.dominio.Quote;
import javacore.Concorrencia.service.StoreService;
import javacore.Concorrencia.service.StoreServiceWithDiscont;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

public class CompletableFutureTest04 {
    public static void main(String[] args) {
        StoreServiceWithDiscont service = new StoreServiceWithDiscont();
        searchPricesWithDiscountAsync(service);

    }

    private static void searchPricesWithDiscount(StoreServiceWithDiscont service) {

        long start = System.currentTimeMillis();
        List<String> stores = List.of("Store 1", "Store 2", "Store 3", "Store 4");
        //   stores.forEach(s -> System.out.println(service.getPriceSynsc(s)));
        stores.stream()
                .map(service::getPriceSynsc)
                .map(Quote::newQuote)
                .map(service::applyDiscount)
                .forEach(System.out::println);
        long end = System.currentTimeMillis();
        System.out.printf("Time passed to searchPrinceSync %dms%n", (end - start));

    }
    private static void searchPricesWithDiscountAsync(StoreServiceWithDiscont service) {

        long start = System.currentTimeMillis();
        List<String> stores = List.of("Store 1", "Store 2", "Store 3", "Store 4");
        List<CompletableFuture<String>> completableFutures = stores.stream()
                //Getting the price async storeName::price:discountCode
                .map(s -> CompletableFuture.supplyAsync(() -> service.getPriceSynsc(s)))
                // Instantiating a new quote from the string generated by getPriceSync
                .map(cf -> cf.thenApply(Quote::newQuote))
                // Composing the first completable future
                .map(cf -> cf.thenCompose(quote -> CompletableFuture.supplyAsync(() -> service.applyDiscount(quote))))
                .collect(Collectors.toList());

        completableFutures.stream()
                .map(CompletableFuture::join)
                .forEach(System.out::println);


        long end = System.currentTimeMillis();
        System.out.printf("Time passed to searchPrinceSync %dms%n", (end - start));

    }
}
